// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    content String @db.VarChar(255)

    createdBy   User    @relation(fields: [authorId], references: [id])
    authorId    String
    createdById String?

    @@index([authorId])
}

// Necessary for Next auth
model Account {
    id                 String  @id @default(cuid())
    userId             String
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String? // @db.Text
    access_token       String? // @db.Text
    oauth_token        String?
    oauth_token_secret String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String? // @db.Text
    session_state      String?
    user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, userId])
    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String              @id @default(cuid())
    name              String?
    address           String?             @unique
    ton_address       String?             @unique
    email             String?             @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    posts             Post[]
    twitterHandle     String?
    discordHandle     String?
    UserQuestProgress UserQuestProgress[]
    totalXP           Int                 @default(0) // New field for total XP
    refferalCode      String              @unique
    refferedBy        String?
    telegramId        Int?                @unique
    telegramUsername  String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Mint {
    token         String   @id @db.VarChar
    wallet_string String?  @db.VarChar
    nft_id        String?
    is_minted     Boolean?
}

model wallets {
    token         String   @id
    wallet_string String?
    nft_id        String?
    is_minted     Boolean?
}

model Quest {
    quest_id          Int                 @id @default(autoincrement())
    quest_slug        String              @unique
    quest_name        String
    quest_description String
    steps             QuestStep[]
    UserQuestProgress UserQuestProgress[]
    nft_id            String?             @unique
    xp_points         Int                 @default(0) // New field for XP points
}

model QuestStep {
    step_id           Int                 @id @default(autoincrement())
    quest_id          Int
    quest             Quest               @relation(fields: [quest_id], references: [quest_id])
    step_title        String
    step_description  String
    step_order        Int
    UserQuestProgress UserQuestProgress[]
    step_type         StepType?           @relation(fields: [step_type_id], references: [id])
    step_type_id      Int?
    nft_id            Int?

    @@unique([quest_id, step_order]) // Composite unique constraint
}

model StepType {
    id          Int         @id @default(autoincrement())
    description String
    questSteps  QuestStep[]
}

model UserQuestProgress {
    progress_id        Int       @id @default(autoincrement())
    userId             String
    user               User      @relation(fields: [userId], references: [id])
    quest_id           Int
    quest              Quest     @relation(fields: [quest_id], references: [quest_id])
    current_step_id    Int
    step               QuestStep @relation(fields: [current_step_id], references: [step_id])
    completed          Boolean
    current_step_order Int
    xp_claimed         Boolean   @default(false) // New field for claimed XP
    nft_claimed        Boolean   @default(false) // New field for claimed XP

    @@unique([userId, quest_id])
}
